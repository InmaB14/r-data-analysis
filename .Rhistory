#Download data
download.file("https://ndownloader.figshare.com/files/2292169",
"data/portal_data_joined.csv")
#Load the data
surveys <- read.csv("data/portal_data_joined.csv")
#Load the data
surveys <- read.csv("data/portal_data_joined.csv")
nkjghd
ldbdfb
View(surveys)
#Examine the first 6 lines
head(surveys)
#Loo at the structure
str(surveys)
#Indexing and subsettings
surveys[1,1] #First element in first column
surveys[1,6] #First element in sixth column
#Get some ranges out
surveys[1:3, 7] #First 3 elements in seventh column
surveys[ , 1] #all values in the first column
surveys[8:11, ] #all the values in rows 8 to 11
surveys_200 <- read.csv("data/portal_data_joined.csv")
surveys_200[1:200, ]
nrow(200)
surveys_200 <- [200, ]
surveys_200 <- surveys_200[200, ]
surveys_200 <- surveys[200, ]
nrow(surveys)
#Use that number to pull out just that last row in the data frame.
surveys_last <- surveys[nrow(surveys), ]
surveys_last <- surveys[n_rows, ]
#Use that number to pull out just that last row in the data frame.
n_rows <- nrow(surveys)
surveys_last <- surveys[n_rows, ] #or surveys_last <- surveys[nrow(surveys), ]
#Compare that with what you see as the last row using tail() to make sure itâ€™s meeting expectations.
tail(surveys)
#Use nrow() to extract the row that is in the middle of the data frame. Store the content of this row in an object named surveys_middle.
middle_row <- nrow(surveys)/2
surveys_middle <- surveys[middle_row, ]
#Store the content of this row in an object named surveys_middle.
#Combine nrow() with the - notation above to reproduce the behavior of head(surveys), keeping just the first through 6th rows of the surveys dataset.
#just the first through 6th rows of the surveys dataset.
surveys_head <- surveys[-(7:n_rows), ] # - means excluding
view (surveys_head)
view(surveys_head)
View(surveys_head)
#Factors
sex <- factor(c("male", "female", "female", "male"))
levels(sex)
nlevels(sex)
#Plot of females captured against males
plot(surveys$sex)
#Create a subset of the sex data
sex <- surveys$sex
levels(sex)
#Overwrite the missing label
levels(sex)[1] <- "Undetermined"
levels(Sex)
levels(sex)
levels(sex)
levels(sex)[2] <- "Female"
levels(sex)[3] <- "Male"
levels(sex)
levels(sex)[2,3] <- "Female", "Male"
levels(sex)[2,3] <- "Female" "Male"
levels(sex)
#Change the label F to Female and M to Male at the same time
levels(sex)[2:3] <- c("Female", "Male")
levels(sex)
plot(sex)
#Reorder the position of the factors to put "Undertermined" last
#I need to refactor sex
sex <- factor(sex, levels =c("Female", "Male", "Undetermined"))
plot(sex)
#Analysis data
#Installing Tidyverse
install.packages("tidyverse")
#Load the library to make available to scripts
library("tidyverse")
#Load the library to make available to scripts
library("tidyverse")
#Load the surveys data
surveys <- read.csv("data/portal_data_joined.csv")
#Load the surveys data using read_csv from readr
surveys <- read.csv("data/portal_data_joined.csv")
str(surveys)
#data analysis with dplyr
library("tidyverse")
surveys <- read_csv("data/portal_data_joined.csv")
head(surveys)
surveys
colnames(surveys)
head(surveys)
#Use the square bracket subsetting to select rows from 1978 only
surveys_1978 <- surveys[1978, ]
#Use the square bracket subsetting to select rows from 1978 only
surveys_1978 <- surveys[1978, ]
view(surveys_1978)
View(surveys_1978)
#Use the square bracket subsetting to select rows from 1978 only
surveys[1978, ]
#Use the square bracket subsetting to select rows from 1978 only
surveys[surveys$year == "1978", ]
#dplyr
#filter - used to select rows
filter(surveys, year == 1978)
#select - used to select different columns
select(surveys, plot_id, species_id)
#select only the three columns above but only from 1978
surveys_filtered <- filter(surveys, year == 1978)
surveys_filtered
select(surveys_filtered, year, plot_id, species_id)
#stitching it together with a pipe
# %>% shortcut to type a pipe is shift-ctrl-m %>%
surveys %>%
filter(year == 1978) %>%
select(year, plot_id, species_id)
?select
#mutate - to create new columns based on existing columns or on some operations done on existing columns
surveys %>%
select(weight, species)
survey %>%
mutate(weight_kg = weight/1000) %>%
select(starts_with("w"))
surveys %>%
mutate(weight_kg = weight/1000) %>%
select(starts_with("w"))
surveys %>%
mutate(weight_kg = weight/1000) %>%
select(starts_with("w"))
surveys %>%
mutate(weight_kg = weight/1000) %>%
select(starts_with("w"))
surveys %>%
select(weight, hindfoot_length)
surveys %>%
mutate(hindfoot_half = hindfoot_length/2) %>%
filter (hindfoot_half < 30) %>%
select(species_id, hindfoot_half)
table(surveys$year)
length(table(surveys$year))
range(surveys$year)
range(surveys$species)
summary(surveys)
#splitting and running calculations on groups
surveys %>%
group_by(year) %>%
summarise(mean_hindfoot_length = mean(hindfoot_length))
#splitting and running calculations on groups
surveys %>%
group_by(year) %>%
summarise(mean_hindfoot_length = mean(hindfoot_length,
na.rm = TRUE))
#splitting and running calculations on groups
surveys %>%
group_by(year) %>%
summarise(mean_hindfoot_length = mean(hindfoot_length, na.rm = TRUE))
surveys %>%
filter(!is.na(weight)) %>%
group_by(sex, species_id) %>%
summarise(mean_weight =mean(weight))
surveys %>%
filter(!is.na(weight)) %>%
group_by(sex, species_id) %>%
summarise(mean_weight =mean(weight), min_weight =min(weight), sd_weight = sd(weight))
surveys %>%
count(sex, species) %>%
print(n=81)
surveys %>%
count(sex, species) %>%
arrange(species, desc(n))
surveys %>%
count(species) %>%
arrange(species, desc(n))
surveys %>%
group_by(species) %>%
surveys %>%
count(plot_type) %>%
surveys %>%
group_by(species) %>%
surveys %>%
count(plot_type) %>%
surveys %>%
count(plot_type)
surveys %>%
count(plot_type)
surveys %>%
group_by(plot_type) %>%
tally() #add the observations inside the group and display for me
surveys %>%
max(plot_type, na.rm = TRUE)
surveys %>%
group_by(plot_type, na.rm = TRUE)
surveys %>%
max (plot_type, na.rm = FALSE)
surveys %>%
max (surveys, na.rm = TRUE)
surveys %>%
max (species, na.rm = TRUE)
surveys %>%
pmax.int (species, na.rm = TRUE)
surveys %>%
group_by(plot_type) %>%
tally() #add the observations inside the group and display for me
surveys %>%
group_by(plot_type) %>%
tally() %>%
max(plot_type, na.rm = FALSE)
surveys %>%
group_by(year) %>%
summerise(max_weight = max(weight)) %>%
select(year, genus, species_id, weight, max_weight)
surveys %>%
group_by(year) %>%
summarise(max_weight = max(weight)) %>%
select(year, genus, species_id, weight, max_weight)
surveys %>%
group_by(year) %>%
summarise(max_weight = max(weight)) %>%
select(year, species_id, weight, max_weight)
surveys %>%
group_by(year) %>%
summarise(max_weight = max(weight))
surveys %>%
filter(!is.na(weight)) %>%
group_by(year) %>%
summarise(max_weight = max(weight)) %>%
arrange(desc(max_weight))
surveys %>%
filter(!is.na(weight)) %>%
group_by(year) %>%
summarise(max_weight = max(weight)) %>%
arrange(desc(max_weight))
surveys %>%
filter(!is.na(weight)) %>%
group_by(year) %>%
filter(weight == max(weight)) %>%
select(year, genus, species_id, weight)
surveys %>%
filter(!is.na(weight)) %>%
group_by(year) %>%
filter(weight == max(weight)) %>%
select(year, genus, species_id, weight) %>%
arragne(desc(weight))
surveys %>%
filter(!is.na(weight)) %>%
group_by(year) %>%
filter(weight == max(weight)) %>%
select(year, genus, species_id, weight) %>%
arrange(desc(weight))
surveys_complete <-
surveys %>%
filter(!is.na(weight), !is.na(hindfoot_length), !is.na(sex))
#keep the species for which there are at least 50 observations
species_counts <- surveys_complete %>%
count(species_id) %>%
filter(n>=50)
#reduce the surveys_complete object so that it only contains species with at least 50 observation
#these species are in object species_counts
surveys_complete <-
surveys_complete %>%
filter (species_id %in% species_counts$species_id) #filter the object with that list of species. the part of the right gives tus the columns with the species id.
dim(surveys_complete)
#to save the document
write_csv(surveys_complete, "data/surveys_complete.csv")
#how to plot with ggplot2
ggplot(data=surveys_complete, mapping=aes(X=weight, y=hindfoot_length))
#how to plot with ggplot2
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length))
#how to plot with ggplot2
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length)) + geom_point()
surveys_plot <- surveys_complete, mapping = aes(x = weight, y = hindfoot_length))
surveys_plot <- ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length))
surveys_plot + geom_point()
#reduce the surveys_complete object so that it only contains species with at least 50 observation
numerous_species <- species_counts$species_id
#to understand what %in% we create a random example:
animals <- c("pig", "cat", "dog", "donkey", "gorilla", "mouse")
animals
other_animals <- c("zebra", "parrot", "donkey", "cat", "camel")
animals <- c(animals, "zebra", "parrot", "camel")
animals <- c(animals, "zebra", "parrot", "camel")
animals
animals %in% other_animals
other_animals
animals %in% other_animals
#to understand what %in% we create a random example:
animals <- c("pig", "cat", "dog", "donkey", "gorilla", "mouse")
animals
other_animals <- c("zebra", "parrot", "donkey", "cat", "camel")
other_animals
animals <- c(animals, "zebra", "parrot", "camel")
animals
animals %in% other_animals
animals %in% other_animals
other_animals %in% animals
intersect(animals, other_animals)
#data analysis with dplyr
library("tidyverse")
#ggplot needs data
#ggplot needs aesthetics or mapping of variables from the data to the plot
#visualisation type of dat
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length)) + geom_point()
#ggplot needs data
#ggplot needs aesthetics or mapping of variables from the data to the plot
#visualisation type of dat
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length)) + geom_point(alpha=0.1)
#ggplot needs data
#ggplot needs aesthetics or mapping of variables from the data to the plot
#visualisation type of dat
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length)) + geom_point(alpha=0.1, colour = "blue")
#ggplot needs data
#ggplot needs aesthetics or mapping of variables from the data to the plot
#visualisation type of dat
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length)) + geom_point(alpha=0.1, aes(color=species_id))
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length)) + geom_boxplot()
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length)) + geom_boxplot() + geom_jitter(alpha=0.1, color="tomato")
ggplot(data = surveys_complete, mapping = aes(x = species_id, y = hindfoot_length)) + geom_boxplot() + geom_jitter(alpha=0.1, color="tomato")
ggplot(data = surveys_complete, mapping = aes(x = species_id, y = hindfoot_length)) + geom_boxplot() + geom_point(alpha=0.1, color="tomato")
yearly_counts <-
surveys_complete %>%
group_by(year, species_id) %>%
tally()
suerveys_complete %>%
group_by(year, species_id) %>%
tally()
surveys_complete %>%
group_by(year, species_id) %>%
tally()
yearly_counts
ggplot(data=yearly_counts, mapping=aes(x=year, y=n)) + geom_line()
ggplot(data=yearly_counts, mapping=aes(x=year, y=n, group=species_id)) + geom_line()
ggplot(data=yearly_counts, mapping=aes(x=year, y=n, colour=species_id)) + geom_line()
ggplot(data=yearly_counts, mapping=aes(x=year, y=n))+ geom_line() + facet_wrap(~species_id)
yearly_sex_counts <- surveys_complete %>%
group_by(year, species_id, sex) %>%
tally()
ggplot(data=yearly_sex_counts, mapping=aes(x=year, y=n, color=sex)) + geom_line + facet_wrap(~species_id)
ggplot(data=yearly_sex_counts, mapping=aes(x=year, y=n, colour=sex)) + geom_line() + facet_wrap(~species_id)
#to add the title we add another layer called ggtitle:
ggplot(data=yearly_sex_counts, mapping=aes(x=year, y=n, colour=sex)) + geom_line() + facet_wrap(~species_id) + ggtitle("Species counts over time")
ggplot(data=yearly_sex_counts, mapping=aes(x=year, y=n, colour=sex)) + geom_line() + facet_wrap(~species_id) +labs(title="Species counts over time", x="year of observation", y="Number of species")
ggplot(data=yearly_sex_counts, mapping=aes(x=year, y=n, colour=sex)) + geom_line() + facet_wrap(~species_id) +labs(title="Species counts over time", x="year of observation", y="Number of species") + theme(axis.text.x = element_text(angle=45))
#to save the figure:
ggsave("data/my_fancy_plot.pdf")
ggsave("data/my_fancy_plot.png", width=15, height=10, dpi=300)
#to label the axis and change the angle of element text because they were overlapped:
ggplot(data=yearly_sex_counts, mapping=aes(x=year, y=n, colour=sex)) + geom_line() + facet_wrap(~species_id) +labs(title="Species counts over time", x="year of observation", y="Number of species") + theme(axis.text.x = element_text(angle=45))
#to save the figure:
ggsave("data/my_fancy_plot.pdf")
