#data analysis with dplyr
library("tidyverse")
surveys <- read_csv("data/portal_data_joined.csv")
head(surveys)
surveys
colnames(surveys)
head(surveys)
#Use the square bracket subsetting to select rows from 1978 only
surveys[surveys$year == "1978", ]
#dplyr
#filter - used to select rows
filter(surveys, year == 1978)
#select - used to select different columns
select(surveys, plot_id, species_id)
#select only the three columns above but only from 1978
surveys_filtered <- filter(surveys, year == 1978)
surveys_filtered
select(surveys_filtered, year, plot_id, species_id)
#stitching it together with a pipe
# %>% shortcut to type a pipe is shift-ctrl-m %>% 
#surveys_short <-  to save the table we are creating just below
surveys %>%
  filter(year == 1978) %>% 
  select(year, plot_id, species_id)
?select
#mutate - to create new columns based on existing columns or on some operations done on existing columns
surveys %>% 
  select(weight, species)

surveys %>% 
  mutate(weight_kg = weight/1000) %>% 
  select(starts_with("w"))

#challenge 1
#Create a new data frame from surveys that contains: 
#only species_id column and a new column called hindfoot_half
#containing half of values from column hindfoot_length. 
#all values in hindfoot_half should be smaller than 30


surveys %>% 
  mutate(hindfoot_half = hindfoot_length/2) %>% 
  filter (hindfoot_half < 30) %>% 
  select(species_id, hindfoot_half)

#how to remove missing observations
surveys %>% 
  mutate(weight_kg = weight/1000) %>% 
  select(starts_with("w")) %>% 
  filter(is.na(weight)) #filters out rows in column weight that are not na (missing data)
#other functions and parameters to remove missing observations
?complete.cases
?na.omit
?na.rm = TRUE

#how to have a summary overview of a dataset
surveys
table(surveys$year)
length(table(surveys$year))
range(surveys$year)
range(surveys$species)
summary(surveys)

#splitting and running calculations on groups
surveys %>% 
  group_by(year) %>% 
  summarise(mean_hindfoot_length = mean(hindfoot_length, na.rm = TRUE))
#got warning messages because of the NA values we have
#calculate mean and standard deviation
surveys %>%
  filter(!is.na(weight)) %>% 
  group_by(sex, species_id) %>% 
  summarise(mean_weight =mean(weight), min_weight =min(weight), sd_weight = sd(weight))
surveys %>%
  count(sex, species) %>% 
  print(n=81)
surveys %>% 
  count(species, sort=TRUE)

#arragne - used to rearrange rows
surveys %>%
  count(species, sort = TRUE)
surveys %>% 
  count(sex, species) %>% 
  arrange(species, desc(n))

#challenge 2
#how many individuals were caught in each plot_type?
#answer in 2 ways (group_by and count)

surveys %>%
  count(plot_type)
surveys %>%
  group_by(plot_type) %>% 
  tally() #add the observations inside the group and display for me 

#challenge 3
#what is the heaviest animal measured in each year?
#return columns year, genus, species_id and weight. Do not return missing observations.

surveys %>%
  filter(!is.na(weight)) %>% 
  group_by(year) %>%
  summarise(max_weight = max(weight)) %>% 
  arrange(desc(max_weight))

surveys %>%
  filter(!is.na(weight)) %>% 
  group_by(year) %>%
  filter(weight == max(weight)) %>% 
  select(year, genus, species_id, weight) %>% 
  arrange(desc(weight))

surveys_complete <- 
  surveys %>% 
  filter(!is.na(weight), !is.na(hindfoot_length), !is.na(sex))

#keep the species for which there are at least 50 observations
species_counts <- surveys_complete %>% 
  count(species_id) %>% 
  filter(n>=50)

num_species <- surveys_complete %>% #we save it
  count(species_id) %>% 
  filter(n>=1000)

surveys_complete %>% 
  filter(species_id %in% num_species$species_id)

#to understand what %in% we create a random example:
animals <- c("pig", "cat", "dog", "donkey", "gorilla", "mouse")
animals  
other_animals <- c("zebra", "parrot", "donkey", "cat", "camel")
animals <- c(animals, "zebra", "parrot", "camel")
animals
other_animals
animals %in% other_animals
other_animals %in% animals

intersect(animals, other_animals)


#reduce the surveys_complete object so that it only contains species with at least 50 observation
numerous_species <- species_counts$species_id
#these species are in object species_counts
surveys_complete <- 
  surveys_complete %>% 
  filter(species_id %in% species_counts$species_id) #filter the object with that list of species. the part of the right gives tus the columns with the species id.
# %in% - any element of the list to extract from the column
dim(surveys_complete)
#another way of doing this
#filter(species_id %in% c("DM", "DO", "DS")) (manuaaal)

#to save the document
write_csv(surveys_complete, "data/surveys_complete.csv")


#how to plot with ggplot2
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length)) + geom_point()
surveys_plot <- ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length))
surveys_plot + geom_point()

#ggplot needs data
#ggplot needs aesthetics or mapping of variables from the data to the plot
#visualisation type of dat
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length)) + geom_point(alpha=0.1, aes(color=species_id))
#alpha makes the point transparent
#instead of coloring everything blue we can specify the color of each species_id adding an aesthetic variable form
#use of geom_boxplot, geom_jitther and geom_point
ggplot(data = surveys_complete, mapping = aes(x = species_id, y = hindfoot_length)) + geom_boxplot() + geom_jitter(alpha=0.1, color="tomato")
ggplot(data = surveys_complete, mapping = aes(x = species_id, y = hindfoot_length)) + geom_boxplot() + geom_point(alpha=0.1, color="tomato")

yearly_counts <- 
  surveys_complete %>% 
  group_by(year, species_id) %>% 
  tally()

surveys_complete %>% 
  group_by(year, species_id) %>% 
  tally()

yearly_counts

ggplot(data=yearly_counts, mapping=aes(x=year, y=n)) + geom_line()
ggplot(data=yearly_counts, mapping=aes(x=year, y=n, group=species_id)) + geom_line()
ggplot(data=yearly_counts, mapping=aes(x=year, y=n, colour=species_id)) + geom_line()

#faceting - splitting display of data into multiple subgroups

ggplot(data=yearly_counts, mapping=aes(x=year, y=n))+ geom_line() + facet_wrap(~species_id)
yearly_sex_counts <- surveys_complete %>% 
  group_by(year, species_id, sex) %>% 
  tally()
ggplot(data=yearly_sex_counts, mapping=aes(x=year, y=n, colour=sex)) + geom_line() + facet_wrap(~species_id)

#to add the title we add another layer called ggtitle:
ggplot(data=yearly_sex_counts, mapping=aes(x=year, y=n, colour=sex)) + geom_line() + facet_wrap(~species_id) + ggtitle("Species counts over time")
#to label the axis and change the angle of element text because they were overlapped:
ggplot(data=yearly_sex_counts, mapping=aes(x=year, y=n, colour=sex)) + geom_line() + facet_wrap(~species_id) +labs(title="Species counts over time", x="year of observation", y="Number of species") + theme(axis.text.x = element_text(angle=45)) 
#to save the figure:
ggsave("data/my_fancy_plot.pdf")
ggsave("data/my_fancy_plot.png", width=15, height=10, dpi=300)
